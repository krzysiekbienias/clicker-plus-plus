#include "arrays/sorted_squared.hpp"
#include "binary_tree/binary_tree_simple.hpp"
#include "stack/daily_temperatures.hpp"
#include "stack/evaluate_expression.hpp"
#include <fstream>
#include <iostream>
#include "heap/kth_largest_element.hpp"
#include "utils/print_utils.hpp"
#include "utils/print_utils_templates.hpp"
#include "graphs/graph.hpp"
#include "graphs/count_islands.hpp"
#include "graphs/island_perimeter.hpp"
#include "graphs/river_sizes.hpp"
#include "dynamic_programming/paths_in_matrix.hpp"
#include "dynamic_programming/minimum_path_cost.hpp"
#include "dynamic_programming/gold_mine.hpp"
#include "dynamic_programming/lis_len.hpp"
#include "arrays/min_reward.hpp"
#include "greedy/jump_to_the_end.hpp"
//#include "linked_list/single_linked_list.hpp"
#include "math_and_geometry/line_through_points.hpp"
#include "priority_queue/stones_war.hpp"
#include "queue/students_lunch.hpp"
#include "queue/time_to_buy_tickets.hpp"
#include "recursion/nth_fibbonaci.hpp"
#include "sliding_window/longest_substring_without_repeating_characters.hpp"
#include "utils/print_utils.hpp"
#include "sorting/kth_largest_element.hpp"
#include "heap/kth_largest_element.hpp"
#include "backtracking/permutations.hpp"
#include "binary_tree/binary_tree_node.hpp"
#include "binary_tree/branch_sums.hpp"
#include "matrix/row_by_row.hpp"
#include "matrix/column_by_column.hpp"
#include "graphs/graph.hpp"
#include "graphs/graph_node.hpp"
#include "dynamic_programming/paths_in_matrix.hpp"
#include "dynamic_programming/knapsack_problem01.hpp"
#include "dynamic_programming/min_cost_for_tickets.hpp"
#include "math_and_geometry/largest_triangle_area.hpp"
#include "strings/roman_to_intiger.hpp"
#include "matrix/row_by_row.hpp"
#include "competitive_programming/binary_exponential.hpp"
#include "strings/ceasar_cipher_encryptor.hpp"
#include "sorting/bubble_sort.hpp"
#include "sorting/count_inversions.hpp"
#include "sorting/insertion_sort.hpp"
#include "sorting/dutch_national_flag.hpp"
#include "searching/local_maxima_array.hpp"
#include "strings/first_non_repeating_character.hpp"
#include "linked_list/find_loop.hpp"
#include "binary_tree/bfs.hpp"
#include "binary_tree/dfs.hpp"
#include "dynamic_programming/min_number_of_coins_for_change.hpp"
#include "dynamic_programming/number_of_ways_to_make_change.hpp"
#include "recursion/phone_number_mnemonics.hpp"
#include "recursion/sum_of_digits.hpp"
#include "arrays/apartment_hunting.hpp"
#include "arrays/longest_subarray_with_sum.hpp"
#include "stack/baseball_game.hpp"
#include "stack/clear_digits.hpp"
#include "two_pointers/sweet_and_savory.hpp"
#include "graphs/graph_adjacent_list.hpp"
#include "graphs/largest_island.hpp"
#include "graphs/remove_island.hpp"
#include "matrix/is_on_edge.hpp"
#include "sorting/selection_sort.hpp"
#include "arrays/calendar_matching.hpp"
#include "matrix/repeated_matrix_value.hpp"
#include "arrays/remove_one_element_to_make_the_array_strictly_increasing.hpp"
#include "arrays/restore_finishing_order.hpp"
#include "strings/jewel_game.hpp"
#include "std_aliases.hpp"
#include "famous_algorithms/fisher_yates.hpp"
#include "linked_list/coding_platform_setup.hpp"
#include "strings/minimum_characters_for_words.hpp"

int main() {
    using namespace stl;
    using namespace io;

    cout << "Welcome to Clicker++! 🧟‍♂️\n";
    vector<string> input = {"this", "that", "did", "deed", "them!", "a"};

    auto res=minimumCharactersForWords(input);
    print_utils::printVector(res);

    return 0;
}

